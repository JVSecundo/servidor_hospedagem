#!/bin/bash
set -e

echo "Iniciando testes de penetração automatizados..."

# Variáveis
TARGET="http://localhost"
REPORT_DIR="/var/log/security-tests/$(date +%Y%m%d)"
mkdir -p $REPORT_DIR

# Função para testar vulnerabilidades web comuns
test_web_vulnerabilities() {
    echo "Executando testes de vulnerabilidades web..."
    
    # Teste de XSS
    echo "Testando XSS..."
    PAYLOADS=(
        "<script>alert(1)</script>"
        "<img src=x onerror=alert(1)>"
        "\"><script>alert(1)</script>"
    )
    
    for payload in "${PAYLOADS[@]}"; do
        curl -s "${TARGET}/?q=${payload}" \
             -H "User-Agent: PenTest-Script" \
             -o /dev/null \
             -w "XSS Test Status: %{http_code}\n"
    done
    
    # Teste de SQL Injection
    echo "Testando SQL Injection..."
    SQL_PAYLOADS=(
        "' OR '1'='1"
        "1; DROP TABLE users--"
        "1 UNION SELECT username,password FROM users--"
    )
    
    for payload in "${SQL_PAYLOADS[@]}"; do
        curl -s "${TARGET}/?id=${payload}" \
             -H "User-Agent: PenTest-Script" \
             -o /dev/null \
             -w "SQLi Test Status: %{http_code}\n"
    done
}

# Função para testar headers de segurança
test_security_headers() {
    echo "Verificando headers de segurança..."
    
    HEADERS=$(curl -s -I $TARGET)
    echo "$HEADERS" > "$REPORT_DIR/headers.txt"
    
    # Lista de headers obrigatórios
    REQUIRED_HEADERS=(
        "X-Frame-Options"
        "X-Content-Type-Options"
        "X-XSS-Protection"
        "Content-Security-Policy"
        "Strict-Transport-Security"
    )
    
    for header in "${REQUIRED_HEADERS[@]}"; do
        if echo "$HEADERS" | grep -q "$header"; then
            echo "[OK] $header encontrado"
        else
            echo "[FALHA] $header não encontrado"
            exit 1
        fi
    done
}

# Função para testar configurações SSL/TLS
test_ssl_config() {
    echo "Verificando configuração SSL/TLS..."
    
    # Testar versões do protocolo
    PROTOCOLS=("ssl2" "ssl3" "tls1" "tls1_1" "tls1_2" "tls1_3")
    
    for protocol in "${PROTOCOLS[@]}"; do
        result=$(openssl s_client -connect localhost:443 -$protocol 2>&1)
        if echo "$result" | grep -q "Connection established"; then
            echo "[INFO] $protocol está habilitado"
            # TLS 1.2 e 1.3 são OK, outros devem falhar
            if [[ "$protocol" != "tls1_2" && "$protocol" != "tls1_3" ]]; then
                echo "[FALHA] Protocolo inseguro ($protocol) está habilitado"
                exit 1
            fi
        fi
    done
}

# Função para testar força bruta
test_brute_force_protection() {
    echo "Testando proteção contra força bruta..."
    
    for i in {1..10}; do
        response=$(curl -s -o /dev/null -w "%{http_code}" \
                       -X POST \
                       -d "username=admin&password=wrong$i" \
                       "$TARGET/login")
        
        if [ "$response" == "429" ]; then
            echo "[OK] Proteção contra força bruta ativa (recebido 429 Too Many Requests)"
            break
        fi
        
        if [ $i == 10 ]; then
            echo "[FALHA] Sem proteção contra força bruta detectada"
            exit 1
        fi
    done
}

# Função para testar portas abertas
test_open_ports() {
    echo "Verificando portas abertas..."
    
    # Lista de portas permitidas
    ALLOWED_PORTS=(22 80 443 8080)
    
    # Scan de portas com nmap
    nmap -p- localhost -oN "$REPORT_DIR/ports.txt"
    
    # Verificar portas abertas não permitidas
    while read -r line; do
        if echo "$line" | grep -q "^[0-9]*/tcp.*open"; then
            port=$(echo "$line" | cut -d'/' -f1)
            if [[ ! " ${ALLOWED_PORTS[@]} " =~ " ${port} " ]]; then
                echo "[FALHA] Porta não autorizada aberta: $port"
                exit 1
            fi
        fi
    done < "$REPORT_DIR/ports.txt"
}

# Execução principal
main() {
    echo "Iniciando testes de segurança..."
    
    test_web_vulnerabilities
    test_security_headers
    test_ssl_config
    test_brute_force_protection
    test_open_ports
    
    echo "Testes de segurança concluídos com sucesso!"
    echo "Relatórios disponíveis em: $REPORT_DIR"
}

main