#!/bin/bash
set -e

echo "Iniciando scan de vulnerabilidades..."

# Variáveis
REPORT_DIR="/var/log/security-scans/$(date +%Y%m%d)"
DOCKER_IMAGE="secure-web-app:latest"
SEVERITY_THRESHOLD="HIGH"

# Criar diretório para relatórios
mkdir -p $REPORT_DIR

# Função para scan de dependências
check_dependencies() {
    echo "Verificando dependências..."
    
    # OWASP Dependency Check
    dependency-check.sh \
        --project "Secure Web App" \
        --scan . \
        --format HTML JSON \
        --out $REPORT_DIR \
        --failOnCVSS 7
        
    if [ $? -ne 0 ]; then
        echo "ERRO: Vulnerabilidades críticas encontradas nas dependências"
        exit 1
    fi
}

# Função para scan de imagem Docker
scan_docker_image() {
    echo "Escaneando imagem Docker..."
    
    # Trivy scan
    trivy image \
        --severity $SEVERITY_THRESHOLD,CRITICAL \
        --format template \
        --template "@/contrib/html.tpl" \
        -o "$REPORT_DIR/docker-scan.html" \
        $DOCKER_IMAGE
        
    if [ $? -ne 0 ]; then
        echo "ERRO: Vulnerabilidades encontradas na imagem Docker"
        exit 1
    fi
}

# Função para scan de código estático
static_code_analysis() {
    echo "Executando análise estática de código..."
    
    # SonarQube scan
    sonar-scanner \
        -Dsonar.projectKey=secure-web-app \
        -Dsonar.sources=. \
        -Dsonar.host.url=http://localhost:9000 \
        -Dsonar.login=$SONAR_TOKEN
        
    # Verificar quality gate
    quality_gate_status=$(curl -s "http://localhost:9000/api/qualitygates/project_status?projectKey=secure-web-app" \
        -H "Authorization: Bearer $SONAR_TOKEN" | jq -r '.projectStatus.status')
        
    if [ "$quality_gate_status" != "OK" ]; then
        echo "ERRO: Quality gate falhou"
        exit 1
    fi
}

# Função para scan de configurações
check_configurations() {
    echo "Verificando configurações de segurança..."
    
    # Lynis audit
    lynis audit system --quick --no-colors --report-file "$REPORT_DIR/lynis-report.txt"
    
    # Verificar pontuação do Lynis
    warning_count=$(grep "warning" "$REPORT_DIR/lynis-report.txt" | wc -l)
    if [ $warning_count -gt 10 ]; then
        echo "ERRO: Muitos avisos de segurança encontrados"
        exit 1
    fi
}

# Função para scan de rede
network_scan() {
    echo "Executando scan de rede..."
    
    # Nmap scan
    nmap -sS -sV -p- -oX "$REPORT_DIR/nmap-scan.xml" localhost
    
    # Verificar portas abertas não autorizadas
    unauthorized_ports=$(xmllint --xpath "//port[@portid!='80' and @portid!='443' and @portid!='22']" \
        "$REPORT_DIR/nmap-scan.xml" | wc -l)
        
    if [ $unauthorized_ports -gt 0 ]; then
        echo "ERRO: Portas não autorizadas encontradas"
        exit 1
    fi
}

# Função para gerar relatório
generate_report() {
    echo "Gerando relatório consolidado..."
    
    cat > "$REPORT_DIR/index.html" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>Relatório de Segurança</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .section { margin: 20px 0; padding: 20px; border: 1px solid #ddd; }
        .warning { color: orange; }
        .error { color: red; }
        .success { color: green; }
    </style>
</head>
<body>
    <h1>Relatório de Scan de Vulnerabilidades</h1>
    <div class="section">
        <h2>Resumo</h2>
        <p>Data do scan: $(date)</p>
        <p>Imagem analisada: $DOCKER_IMAGE</p>
    </div>
    
    <div class="section">
        <h2>Dependências</h2>
        <iframe src="dependency-check-report.html" width="100%" height="500px"></iframe>
    </div>
    
    <div class="section">
        <h2>Scan Docker</h2>
        <iframe src="docker-scan.html" width="100%" height="500px"></iframe>
    </div>
    
    <div class="section">
        <h2>Análise de Código</h2>
        <pre>$(cat "$REPORT_DIR/sonar-report.txt" 2>/dev/null || echo "Relatório não disponível")</pre>
    </div>
    
    <div class="section">
        <h2>Configurações</h2>
        <pre>$(cat "$REPORT_DIR/lynis-report.txt" 2>/dev/null || echo "Relatório não disponível")</pre>
    </div>
    
    <div class="section">
        <h2>Scan de Rede</h2>
        <pre>$(cat "$REPORT_DIR/nmap-scan.xml" 2>/dev/null || echo "Relatório não disponível")</pre>
    </div>
</body>
</html>
EOF
}

# Função para enviar alertas
send_alerts() {
    if [ -f "$REPORT_DIR/vulnerabilities.txt" ]; then
        # Enviar email
        mail -s "Relatório de Vulnerabilidades" admin@exemplo.com < "$REPORT_DIR/vulnerabilities.txt"
        
        # Enviar para Slack
        if [ ! -z "$SLACK_WEBHOOK" ]; then
            curl -X POST -H 'Content-type: application/json' \
                --data "{\"text\":\"Novas vulnerabilidades encontradas. Verifique o relatório em $REPORT_DIR\"}" \
                "$SLACK_WEBHOOK"
        fi
    fi
}

# Função principal
main() {
    echo "Iniciando análise de segurança..."
    
    # Verificar dependências necessárias
    command -v trivy >/dev/null 2>&1 || { echo "trivy não está instalado"; exit 1; }
    command -v sonar-scanner >/dev/null 2>&1 || { echo "sonar-scanner não está instalado"; exit 1; }
    command -v lynis >/dev/null 2>&1 || { echo "lynis não está instalado"; exit 1; }
    
    # Executar scans
    check_dependencies
    scan_docker_image
    static_code_analysis
    check_configurations
    network_scan
    
    # Gerar e enviar relatórios
    generate_report
    send_alerts
    
    echo "Análise de segurança concluída!"
    echo "Relatório disponível em: $REPORT_DIR/index.html"
}

# Executar scan
main